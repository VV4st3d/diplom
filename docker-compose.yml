version: '3.8'

services:
  # Фронтенд-сервис (Vue.js)
  frontend:
    build: 
      context: ./client
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=http://localhost:5000
    ports:
      - "80:80" # Порт для веб-приложения
    depends_on:
      - backend
    restart: always
    networks:
      - webdevapp
    # Оптимизация производительности
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Бэкенд-сервис (Node.js)
  backend:
    build: 
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "5000:5000" # Порт API
    depends_on:
      - mongodb
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://mongodb:27017/webdevplatform
      - JWT_SECRET=${JWT_SECRET:-supersecret}
      - CLIENT_URL=http://localhost
    restart: always
    volumes:
      - ./server/logs:/usr/src/app/logs # Монтирование логов
    networks:
      - webdevapp
    # Оптимизация производительности
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # База данных (MongoDB)
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017" # Порт MongoDB (опционально для локальной разработки)
    volumes:
      - mongodb_data:/data/db # Сохранение данных между перезапусками
      - mongodb_config:/data/configdb # Конфигурация MongoDB
    environment:
      - MONGO_INITDB_DATABASE=webdevplatform
    networks:
      - webdevapp
    restart: always
    # Оптимизация производительности
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    command: ["--wiredTigerCacheSizeGB", "1"]

# Определение томов для хранения данных
volumes:
  mongodb_data:
  mongodb_config:

# Определение сетей для изоляции компонентов
networks:
  webdevapp:
    driver: bridge 